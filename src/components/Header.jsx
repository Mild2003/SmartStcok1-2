import React, { useState } from "react";
import Box from "@mui/material/Box";
import Toolbar from "@mui/material/Toolbar";
import TextField from "@mui/material/TextField";
import MenuItem from "@mui/material/MenuItem";
import Button from "@mui/material/Button";
import Checkbox from "@mui/material/Checkbox";
import FormControlLabel from "@mui/material/FormControlLabel";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import SaveIcon from "@mui/icons-material/Save";
import ClearIcon from "@mui/icons-material/Clear";
import Topbar from "./Topbar";
import Sidebar from "./Sidebar";
import "./Header.css";

function Header() {
  const [receiveDate, setReceiveDate] = useState(null);
  const [expiryDate, setExpiryDate] = useState(null);
  const [active, setActive] = useState("‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤");
  const [menu1, setMenu1] = useState("");
  const [menu2, setMenu2] = useState("");
  const [menu3, setMenu3] = useState("");
  const [boxQty, setBoxQty] = useState("");
  const [pieceQty, setPieceQty] = useState("");
  const [price, setPrice] = useState("");
  const [discount, setDiscount] = useState("");
  const [total, setTotal] = useState("");
  const [vat, setVat] = useState("");
  const [billNo, setBillNo] = useState("");
  const [lotNumber, setLotNumber] = useState("");
  const [autoGen, setAutoGen] = useState(false);
  const [barcode, setBarcode] = useState("");
  const [comment, setComment] = useState("");

  const handleSave = () => {
    const formData = {
      receiveDate,
      expiryDate,
      menu1,
      menu2,
      menu3,
      boxQty,
      pieceQty,
      price,
      discount,
      total,
      vat,
      billNo,
      lotNumber,
      autoGen,
      barcode,
      comment,
    };
    console.log("üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", formData);
  };

  const handleClear = () => {
    setReceiveDate(null);
    setExpiryDate(null);
    setMenu1("");
    setMenu2("");
    setMenu3("");
    setBoxQty("");
    setPieceQty("");
    setPrice("");
    setDiscount("");
    setTotal("");
    setVat("");
    setBillNo("");
    setLotNumber("");
    setAutoGen(false);
    setBarcode("");
    setComment("");
  };

  return (
    <Box sx={{ display: "flex", height: "100vh" }}>
      <Sidebar active={active} setActive={setActive} />
      <Box component="main" sx={{ flexGrow: 1, p: 3, position: "relative" }}>
        <Topbar active={active} />
        <Toolbar />

        <div className="menu-container">
          {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö */}
          <LocalizationProvider dateAdapter={AdapterDayjs}>
            <DatePicker
              label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö"
              value={receiveDate}
              onChange={(newValue) => setReceiveDate(newValue)}
            />
          </LocalizationProvider>

          {/* ‡∏Ñ‡∏•‡∏±‡∏á */}
          <TextField select label="‡∏Ñ‡∏•‡∏±‡∏á" value={menu1} onChange={(e) => setMenu1(e.target.value)}>
            <MenuItem value="1">‡∏Ñ‡∏•‡∏±‡∏á 1</MenuItem>
            <MenuItem value="2">‡∏Ñ‡∏•‡∏±‡∏á 2</MenuItem>
            <MenuItem value="3">‡∏Ñ‡∏•‡∏±‡∏á 3</MenuItem>
          </TextField>

          {/* ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó / ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• */}
          <TextField
            select
            label="‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó/‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•"
            value={menu2}
            onChange={(e) => setMenu2(e.target.value)}
          >
            <MenuItem value="1">‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó A</MenuItem>
            <MenuItem value="2">‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó B</MenuItem>
            <MenuItem value="3">‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• C</MenuItem>
            <MenuItem value="4">‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• D</MenuItem>
          </TextField>

          {/* ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
          <TextField select label="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" value={menu3} onChange={(e) => setMenu3(e.target.value)}>
            <MenuItem value="1">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ 1</MenuItem>
            <MenuItem value="2">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ 2</MenuItem>
            <MenuItem value="3">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ 3</MenuItem>
          </TextField>

          {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô */}
          <div className="quantity-group">
            <TextField label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô/‡∏Å‡∏•‡πà‡∏≠‡∏á" value={boxQty} onChange={(e) => setBoxQty(e.target.value)} />
            <TextField label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô/‡∏ä‡∏¥‡πâ‡∏ô" value={pieceQty} onChange={(e) => setPieceQty(e.target.value)} />
          </div>

          {/* ‡∏£‡∏≤‡∏Ñ‡∏≤ */}
          <div className="pricing-group">
            <TextField label="‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Å‡∏•‡πà‡∏≠‡∏á" value={price} onChange={(e) => setPrice(e.target.value)} />
            <TextField label="‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î" value={discount} onChange={(e) => setDiscount(e.target.value)} />
            <TextField label="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°" value={total} onChange={(e) => setTotal(e.target.value)} />
            <TextField label="VAT" value={vat} onChange={(e) => setVat(e.target.value)} />
          </div>

          <TextField label="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•/‡πÉ‡∏ö‡∏£‡∏±‡∏ö" value={billNo} onChange={(e) => setBillNo(e.target.value)} />
          <TextField label="Lot Number" value={lotNumber} onChange={(e) => setLotNumber(e.target.value)} />

          {/* Auto gen ‡πÅ‡∏•‡∏∞ ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ */}
          <div className="expiry-row">
            <FormControlLabel
              control={<Checkbox checked={autoGen} onChange={(e) => setAutoGen(e.target.checked)} />}
              label="Auto gen"
            />
            <LocalizationProvider dateAdapter={AdapterDayjs}>
              <DatePicker
                label="‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏"
                value={expiryDate}
                onChange={(newValue) => setExpiryDate(newValue)}
              />
            </LocalizationProvider>
          </div>

          <TextField label="Barcode ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" value={barcode} onChange={(e) => setBarcode(e.target.value)} />
          <TextField label="Comment *" value={comment} onChange={(e) => setComment(e.target.value)} />

          {/* ‡∏õ‡∏∏‡πà‡∏° Save / Clear */}
          <div className="button-container">
            <Button className="save-button" startIcon={<SaveIcon />} onClick={handleSave} variant="contained">
              Save
            </Button>
            <Button className="clear-button" startIcon={<ClearIcon />} onClick={handleClear} variant="contained">
              Clear
            </Button>
          </div>
        </div>
      </Box>
    </Box>
  );
}

export default Header;
